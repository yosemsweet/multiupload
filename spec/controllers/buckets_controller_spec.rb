require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BucketsController do

  # This should return the minimal set of attributes required to create a valid
  # Bucket. As you add validations to Bucket, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    Factory.attributes_for(:bucket)
  end

  describe "GET index" do
    it "assigns all buckets as @buckets" do
      bucket = Bucket.create! valid_attributes
      get :index
      assigns(:buckets).should eq([bucket])
    end
  end

  describe "GET show" do
    it "assigns the requested bucket as @bucket" do
      bucket = Bucket.create! valid_attributes
      get :show, :id => bucket.id
      assigns(:bucket).should eq(bucket)
    end
  end

  describe "GET new" do
    it "assigns a new bucket as @bucket" do
      get :new
      assigns(:bucket).should be_a_new(Bucket)
    end
  end

  describe "GET edit" do
    it "assigns the requested bucket as @bucket" do
      bucket = Bucket.create! valid_attributes
      get :edit, :id => bucket.id
      assigns(:bucket).should eq(bucket)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Bucket" do
        expect {
          post :create, :bucket => valid_attributes
        }.to change(Bucket, :count).by(1)
      end

      it "assigns a newly created bucket as @bucket" do
        post :create, :bucket => valid_attributes
        assigns(:bucket).should be_a(Bucket)
        assigns(:bucket).should be_persisted
      end

      it "redirects to the created bucket" do
        post :create, :bucket => valid_attributes
        response.should redirect_to(Bucket.last)
      end

			it "accepts a single nested parameter for assets_attributes" do
				params = valid_attributes.merge(:assets_attributes => { "0" => Factory.attributes_for(:asset) })

				post :create, :bucket => params
				assigns(:bucket).should be_a(Bucket)
        assigns(:bucket).should be_persisted
				assigns(:bucket).assets.should_not be_empty
			end
			
			it "accepts multiple nested parameters for assets_attributes" do
				params = { :assets_attributes => { "0" => Factory.attributes_for(:asset), "1" => Factory.attributes_for(:image_asset) } }

				post :create, :bucket => params
				assigns(:bucket).should be_a(Bucket)
        assigns(:bucket).should be_persisted
				assigns(:bucket).assets.count.should == 2
			end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved bucket as @bucket" do
        # Trigger the behavior that occurs when invalid params are submitted
        Bucket.any_instance.stub(:save).and_return(false)
        post :create, :bucket => {}
        assigns(:bucket).should be_a_new(Bucket)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Bucket.any_instance.stub(:save).and_return(false)
        post :create, :bucket => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested bucket" do
        bucket = Bucket.create! valid_attributes
        # Assuming there are no other buckets in the database, this
        # specifies that the Bucket created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Bucket.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => bucket.id, :bucket => {'these' => 'params'}
      end

      it "assigns the requested bucket as @bucket" do
        bucket = Bucket.create! valid_attributes
        put :update, :id => bucket.id, :bucket => valid_attributes
        assigns(:bucket).should eq(bucket)
      end

      it "redirects to the bucket" do
        bucket = Bucket.create! valid_attributes
        put :update, :id => bucket.id, :bucket => valid_attributes
        response.should redirect_to(bucket)
      end

			it "accepts a single nested parameter for assets_attributes" do
	      bucket = Bucket.create! valid_attributes
				params = { 
					:assets_attributes => { "0" => Factory.attributes_for(:asset) }
				}

				put :update, :id => bucket.id, :bucket => params
				assigns(:bucket).should be_a(Bucket)
        assigns(:bucket).should be_persisted
				assigns(:bucket).assets.should_not be_empty
			end
			
			it "accepts multiple nested parameters for assets_attributes" do
	      bucket = Bucket.create! valid_attributes
				params = { 
					:assets_attributes => { 
						"0" => Factory.attributes_for(:asset),
						"1" => Factory.attributes_for(:image_asset) 
					}
				}
				put :update, :id => bucket.id, :bucket => params
				assigns(:bucket).should be_a(Bucket)
        assigns(:bucket).should be_persisted
				assigns(:bucket).assets.count.should == 2
			end
    end

    describe "with invalid params" do
      it "assigns the bucket as @bucket" do
        bucket = Bucket.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Bucket.any_instance.stub(:save).and_return(false)
        put :update, :id => bucket.id, :bucket => {}
        assigns(:bucket).should eq(bucket)
      end

      it "re-renders the 'edit' template" do
        bucket = Bucket.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Bucket.any_instance.stub(:save).and_return(false)
        put :update, :id => bucket.id, :bucket => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested bucket" do
      bucket = Bucket.create! valid_attributes
      expect {
        delete :destroy, :id => bucket.id
      }.to change(Bucket, :count).by(-1)
    end

    it "redirects to the buckets list" do
      bucket = Bucket.create! valid_attributes
      delete :destroy, :id => bucket.id
      response.should redirect_to(buckets_url)
    end
  end

end
